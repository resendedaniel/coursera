testing <- read.csv("data/pml-testing.csv")
training <- training[-(1:7)]
training[-length(training)] <- sapply(training[-length(training)], function(x) {
if(!is.numeric(x)) {
as.numeric(as.character(x))
} else {
x
}
})
nzv <- nearZeroVar(training)
training <- training[-nzv]
in_train <- createDataPartition(y=training$classe, p=.6, list=FALSE)
training <- training[in_train, ]
validating <- training[-in_train, ]
t <- proc.time()
# preObj <- preProcess(training[-length(training)], method=c("knnImpute", "center","scale", "BoxCox"))
# validating[-length(validating)] <- predict(preObj, validating[-length(validating)])
model <- train(classe ~ .,
data=training,
method="rf",
tuneLength = 10,
ntree = 1000,
preProcess=c("knnImpute"))
print(proc.time() - t)
source('~/workspace/util/util.R', echo=TRUE)
say("model trained")
258/60
model
model <- train(classe ~ .,
data=training,
method="rf",
tuneLength = 50,
ntree = 1000,
preProcess=c("knnImpute"))
say
t <- proc.time()
# preObj <- preProcess(training[-length(training)], method=c("knnImpute", "center","scale", "BoxCox"))
# validating[-length(validating)] <- predict(preObj, validating[-length(validating)])
model <- train(classe ~ .,
data=training,
method="rf",
tuneLength = 50,
ntree = 1000,
preProcess=c("knnImpute"))
print(proc.time() - t)
say("model trained")
say
say("done")
model
getTrainPerf(model)
say("model trained")
v=NULL
v <- ifelse(is.null(v), sample(voices, 1), v)
voices <- c("Agnes","Albert","Alex","Alice","Alva","Amelie","Anna","BadNews","Bahh","Bells","Boing","Bruce","Bubbles","Carmit","Cellos","Damayanti","Daniel","Deranged","Diego","Ellen","Fiona","Fred","Good News","Hysterical","Ioana","Joana","Junior","Kanya","Karen","Kathy","Kyoko","Laura","Lekha","Luciana","Mariska","Mei-Jia","Melina","Milena","Moira","Monica","Nora","Paulina","Pipe Organ","Princess","Ralph","Samantha","Sara","Satu","Sin-ji","Tarik","Tessa","Thomas","Ting-Ting","Trinoids","Veena","Vicki","Victoria","Whisper","Xander","Yelda","Yuna","Zarvox","Zosia","Zuzana")
v <- ifelse(is.null(v), sample(voices, 1), v)
v
paste0("say ",
"-v", v,
" '",
x,
"'")
x <- "model done"
command <- paste0("say ",
"-v", v,
" '",
x,
"'")
command
source('~/workspace/util/util.R', echo=TRUE)
say("model trained")
command <- paste0("say ",
"-v ", v,
" '",
x,
"'")
system(command)
t <- proc.time()
# preObj <- preProcess(training[-length(training)], method=c("knnImpute", "center","scale", "BoxCox"))
# validating[-length(validating)] <- predict(preObj, validating[-length(validating)])
# model <- train(classe ~ .,
#                data=training,
#                method="rf",
#                tuneLength = 20,
#                ntree = 2000,
#                preProcess=c("knnImpute"))
model <- train(classe ~ .,
data=training,
method="gbm")
model
t <- proc.time()
# preObj <- preProcess(training[-length(training)], method=c("knnImpute", "center","scale", "BoxCox"))
# validating[-length(validating)] <- predict(preObj, validating[-length(validating)])
model <- train(classe ~ .,
data=training,
method="rf",
tuneLength = 20,
ntree = 2000,
preProcess=c("knnImpute"))
# model <- train(classe ~ .,
#                data=training,
#                method="gbm")
print(proc.time() - t)
model
1046/60
model <- train(classe ~ .,
data=training,
method="rf",
tuneLength = 30,
ntree = 1000,
preProcess=c("knnImpute", "center", "scale"))
model <- train(classe ~ .,
data=training,
method="rpart",
#                tuneLength = 30,
#                ntree = 1000,
preProcess=c("knnImpute", "center", "scale"))
model
model <- train(classe ~ .,
data=training,
method="rpart",
#                tuneLength = 30,
#                ntree = 1000,
preProcess=c("center", "scale"))
model
model <- train(classe ~ .,
data=training,
method="rf")
model
training <- read.csv("data/pml-training.csv")
testing <- read.csv("data/pml-testing.csv")
```
There's no need to create a data partition, because the data are already divided in training and testing partition.
Their dimension are: ```r data_dim[1]``` for the ```r names(data)[1]``` and ```r data_dim[2]``` for the ```r names(data)[2]```. We're gonna have a lot of work, too many variables to deal with.
# Training
The classe is the one. The only thing I am sure right now is that the `user_name` is useless, sorry ```r as.character(sample(data$training$user_name,1))```.
Temporary, just to make something work
```{r selecting_features}
# training <- sample_n(raw_data$training, 1000) # tmp
training <- training[-(1:7)]
x[[8]]
training[[8]]
x <- training[[8]]
x <- as.numeric(as.character(x))
x
is.na(x)
valid <- sapply(training, function(x) {
is.na(x) / length(x) < .5
})
valid
dim(valid)
x
is.na(x)
sum(is.na(x)) / length(x) < .5
valid <- sapply(training, function(x) {
sum(is.na(x)) / length(x) < .5
})
length(valid)
sum(valid)
training <- training[valid]
nzv <- nearZeroVar(training)
training <- training[-nzv]
training
dim(training)
in_train <- createDataPartition(y=training$classe, p=.6, list=FALSE)
training <- training[in_train, ]
validating <- training[-in_train, ]
model <- train(classe ~ .,
data=training,
method="rpart",
#                tuneLength = 30,
#                ntree = 1000,
preProcess=c("center", "scale"))
model
model <- train(classe ~ .,
data=training,
method="rf")
---
title: "Project - Coursea - Machine Learning"
author: "Daniel Resende"
date: "June 20, 2015"
output: html_document
---
```{r libraries}
library(caret)
library(dplyr)
```
# Project
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: [http://groupware.les.inf.puc-rio.br/har](http://groupware.les.inf.puc-rio.br/har) (see the section on the Weight Lifting Exercise Dataset).
# Load data
```{r load_data, cache=TRUE}
# data_url <- list(training="http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
#                  testing="http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
# raw_data <- lapply(data_url, read.csv)
# training <- raw_data[[1]]
# testing <- raw_data[[2]]
# data_dim <- unlist(lapply(raw_data, dim))
training <- read.csv("data/pml-training.csv")
testing <- read.csv("data/pml-testing.csv")
```
There's no need to create a data partition, because the data are already divided in training and testing partition.
Their dimension are: ```r dim(training)``` for the training set and ```r dim(testing)``` for the testing. We're gonna have a lot of work, too many variables to deal with.
# Selecting features
The classe is the one.
The only thing I am sure right now is that the `user_name` is useless, sorry ```r as.character(sample(data$training$user_name,1))```.
After some exploratory I have decided to remove all columns that more than 50% is NA and some control variables.
To reduce the processing effort, I runned the neroZeroVar function and remove columns that have zero or few variance and probably doesn't explain nothing.
```{r selecting_features}
# training <- sample_n(raw_data$training, 1000) # tmp
training <- training[-(1:7)]
training[-length(training)] <- sapply(training[-length(training)], function(x) {
if(!is.numeric(x)) {
x <- as.numeric(as.character(x))
} else {
x
}
})
valid <- sapply(training, function(x) {
sum(is.na(x)) / length(x) < .5
})
training <- training[valid]
nzv <- nearZeroVar(training)
training <- training[-nzv]
````
# Training
I am trying to classify the data, so it is a non linear model. A good approach in this case is tree classification method. More specifically I am using the randomForest method.
```{r training}
in_train <- createDataPartition(y=training$classe, p=.6, list=FALSE)
training <- training[in_train, ]
validating <- training[-in_train, ]
dim(training)
training
training <- read.csv("data/pml-training.csv")
testing <- read.csv("data/pml-testing.csv")
dim(training)
training <- training[-(1:7)]
<- sapply(training[-length(training)], function(x) {
if(!is.numeric(x)) {
x <- as.numeric(as.character(x))
} else {
x
}
})
x <- sapply(training[-length(training)], function(x) {
if(!is.numeric(x)) {
x <- as.numeric(as.character(x))
} else {
x
}
})
x
dim(x)
training[-length(training)] <- sapply(training[-length(training)], function(x) {
if(!is.numeric(x)) {
x <- as.numeric(as.character(x))
} else {
x
}
})
dim(training)
valid <- sapply(training, function(x) {
sum(is.na(x)) / length(x) < .5
})
valid
valid <- sapply(training, function(x) {
sum(is.na(x)) / length(x) < .5
})
trainingb <- training[valid]
trainingb
summary(trainingb)
valid <- sapply(training, function(x) {
sum(is.na(x)) / length(x) < .5
})
sum(valid)
length(valid)
training <- training[valid]
dim(training)
nzv <- nearZeroVar(training)
nzv
training
nearZeroVar(training)
?nearZeroVAr
?nearZeroVar
nzv <- nearZeroVar(training, saveMetrics=T)
nzv
training <- training[-!nzv]
training
sapply(training, class)
---
title: "Project - Coursea - Machine Learning"
author: "Daniel Resende"
date: "June 20, 2015"
output: html_document
---
```{r libraries}
library(caret)
library(dplyr)
```
# Project
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: [http://groupware.les.inf.puc-rio.br/har](http://groupware.les.inf.puc-rio.br/har) (see the section on the Weight Lifting Exercise Dataset).
# Load data
```{r load_data, cache=TRUE}
# data_url <- list(training="http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
#                  testing="http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
# raw_data <- lapply(data_url, read.csv)
# training <- raw_data[[1]]
# testing <- raw_data[[2]]
# data_dim <- unlist(lapply(raw_data, dim))
training <- read.csv("data/pml-training.csv")
testing <- read.csv("data/pml-testing.csv")
```
There's no need to create a data partition, because the data are already divided in training and testing partition.
Their dimension are: ```r dim(training)``` for the training set and ```r dim(testing)``` for the testing. We're gonna have a lot of work, too many variables to deal with.
# Selecting features
The classe is the one.
The only thing I am sure right now is that the `user_name` is useless, sorry ```r as.character(sample(data$training$user_name,1))```.
After some exploratory I have decided to remove all columns that more than 50% is NA and some control variables.
To reduce the processing effort, I runned the neroZeroVar function and remove columns that have zero or few variance and probably doesn't explain nothing.
```{r selecting_features}
# training <- sample_n(raw_data$training, 1000) # tmp
training <- training[-(1:7)]
training[-length(training)] <- sapply(training[-length(training)], function(x) {
if(!is.numeric(x)) {
x <- as.numeric(as.character(x))
} else {
x
}
})
valid <- sapply(training, function(x) {
sum(is.na(x)) / length(x) < .5
})
training <- training[valid]
nzv <- !nearZeroVar(training)
nzv
nearZeroVar(training)
summary(training)
nzv <- nearZeroVar(training, saveMetrics=T)
nzv
training[-nzv]
nzv <- nearZeroVar(training)
training[-nzv]
training[nzv]
summary(training)
in_train <- createDataPartition(y=training$classe, p=.6, list=FALSE)
training <- training[in_train, ]
validating <- training[-in_train, ]
in_train <- createDataPartition(y=training$classe, p=.1, list=FALSE)
training <- training[in_train, ]
validating <- training[-in_train, ]
t0 <- proc.time()
# model <- train(classe ~ .,
#                data=training,
#                method="rpart",
# #                tuneLength = 30,
# #                ntree = 1000,
#                preProcess=c("center", "scale"))
model <- train(classe ~ .,
data=training,
method="rf")
t0 <- proc.time()
# model <- train(classe ~ .,
#                data=training,
#                method="rpart",
# #                tuneLength = 30,
# #                ntree = 1000,
#                preProcess=c("center", "scale"))
# model <- train(classe ~ .,
#                data=training,
#                method="rf")
model2 <- randomForest(classe ~ ., data=training)
t1 <- proc.time()
model2
---
title: "Project - Coursea - Machine Learning"
author: "Daniel Resende"
date: "June 20, 2015"
output: html_document
---
```{r libraries}
library(caret)
library(dplyr)
```
# Project
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: [http://groupware.les.inf.puc-rio.br/har](http://groupware.les.inf.puc-rio.br/har) (see the section on the Weight Lifting Exercise Dataset).
# Load data
```{r load_data, cache=TRUE}
# data_url <- list(training="http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
#                  testing="http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
# raw_data <- lapply(data_url, read.csv)
# training <- raw_data[[1]]
# testing <- raw_data[[2]]
# data_dim <- unlist(lapply(raw_data, dim))
training <- read.csv("data/pml-training.csv")
testing <- read.csv("data/pml-testing.csv")
```
There's no need to create a data partition, because the data are already divided in training and testing partition.
Their dimension are: ```r dim(training)``` for the training set and ```r dim(testing)``` for the testing. We're gonna have a lot of work, too many variables to deal with.
# Selecting features
The classe is the one.
The only thing I am sure right now is that the `user_name` is useless, sorry ```r as.character(sample(data$training$user_name,1))```.
After some exploratory I have decided to remove all columns that more than 50% is NA and some control variables.
```{r selecting_features}
# training <- sample_n(raw_data$training, 1000) # tmp
training <- training[-(1:7)]
training[-length(training)] <- sapply(training[-length(training)], function(x) {
if(!is.numeric(x)) {
x <- as.numeric(as.character(x))
} else {
x
}
})
valid <- sapply(training, function(x) {
sum(is.na(x)) / length(x) < .5
})
training <- training[valid]
````
# Training
I am trying to classify the data, so it is a non linear model. A good approach in this case is tree classification method. More specifically I am using the randomForest method.
```{r training}
in_train <- createDataPartition(y=training$classe, p=.6, list=FALSE)
training <- training[in_train, ]
validating <- training[-in_train, ]
t0 <- proc.time()
# model <- train(classe ~ .,
#                data=training,
#                method="rpart",
# #                tuneLength = 30,
# #                ntree = 1000,
#                preProcess=c("center", "scale"))
# model <- train(classe ~ .,
#                data=training,
#                method="rf")
model2 <- randomForest(classe ~ ., data=training)
t1 <- proc.time()
model2
model2$finalModel
model
model2
names(model2)
predicts <- predict(model, newdata=validating[names(validating) %in% names(training)])
predicts
confusionMatrix(predicts, validating$classe)
predicts <- predict(model2, newdata=validating[names(validating) %in% names(training)])
confusionMatrix(predicts, validating$classe)
model <- model2
predicts <- predict(model, newdata=validating[names(validating) %in% names(training)])
confusionMatrix(predicts, validating$classe)
randomForest
library(randomForest)
---
title: "Project - Coursea - Machine Learning"
author: "Daniel Resende"
date: "June 20, 2015"
output: html_document
---
```{r libraries}
library(caret)
library(dplyr)
library(randomForest)
```
# Project
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: [http://groupware.les.inf.puc-rio.br/har](http://groupware.les.inf.puc-rio.br/har) (see the section on the Weight Lifting Exercise Dataset).
# Load data
```{r load_data, cache=TRUE}
# data_url <- list(training="http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
#                  testing="http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
# raw_data <- lapply(data_url, read.csv)
# training <- raw_data[[1]]
# testing <- raw_data[[2]]
# data_dim <- unlist(lapply(raw_data, dim))
training <- read.csv("data/pml-training.csv")
testing <- read.csv("data/pml-testing.csv")
```
There's no need to create a data partition, because the data are already divided in training and testing partition.
Their dimension are: ```r dim(training)``` for the training set and ```r dim(testing)``` for the testing. We're gonna have a lot of work, too many variables to deal with.
# Selecting features
The classe is the one to be predicted. It's a classification data.
The only thing I am sure right now is that the `user_name` is useless, sorry ```r as.character(sample(training$user_name,1))```.
After some exploratory I have decided to remove all columns that more than 50% is NA and some control variables.
```{r selecting_features}
# training <- sample_n(raw_data$training, 1000) # tmp
training <- training[-(1:7)]
training[-length(training)] <- sapply(training[-length(training)], function(x) {
if(!is.numeric(x)) {
x <- as.numeric(as.character(x))
} else {
x
}
})
valid <- sapply(training, function(x) {
sum(is.na(x)) / length(x) < .5
})
training <- training[valid]
predicts <- predict(model, newdata=validating[names(validating) %in% names(training)])
confusionMatrix(predicts, validating$classe)
source('~/.active-rstudio-document', echo=TRUE)
cm <- confusionMatrix(predicts, validating$classe)
cm
names(cm)
cm$positive
cm$overall
cm$overall[1]
testing_predicts <- predict(model, newdata=testing[names(testing) %in% names(training)])
testing_predicts
testing_predicts <- predict(model, newdata=testing[names(testing) %in% names(training)])
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
pml_write_files(testing_predicts)
source('~/.active-rstudio-document', echo=TRUE)
